<resources>
    <string name="app_name">Examples</string>

    <string name="basics_counter_text">
        This screen demonstrates the basics of the Composable Architecture in an archetypal counter
  application.
        \n\n
  The domain of the application is modeled using simple data types that correspond to the mutable
  state of the application and any actions that can affect that state or the outside world.</string>
    
    <string name="two_counters_text">
         This screen demonstrates how to take small features and compose them into bigger ones using the
  `pullback` and `combine` operators on reducers, and the `scope` operator on stores.

        \n\n
  It reuses the domain of the counter screen and embeds it, twice, in a larger domain.
    </string>

    <string name="effects_basic_text">
          This screen demonstrates how to introduce side effects into a feature built with the \n
  Composable Architecture.

  A side effect is a unit of work that needs to be performed in the outside world. For example, an
  API request needs to reach an external service over HTTP, which brings with it lots of
  uncertainty and complexity.

  Many things we do in our applications involve side effects, such as timers, database requests,
  file access, socket connections, and anytime a scheduler is involved (such as debouncing,
  throttling and delaying), and they are typically difficult to test.

  This application has two simple side effects:

  • Each time you count down the number will be incremented back up after a delay of 1 second.
  • Tapping "Number fact" will trigger an API request to load a piece of trivia about that number.

  Both effects are handled by the reducer, and a full test suite is written to confirm that the
  effects behave in the way we expect.
    </string>

    <string name="effects_cancellation_text">
  This screen demonstrates how one can cancel in-flight effects in the Composable Architecture.
    \n\n
  Use the stepper to count to a number, and then tap the "Number fact" button to fetch
  a random fact about that number using an API.
    \n\n
  While the API request is in-flight, you can tap "Cancel" to cancel the effect and prevent
  it from feeding data back into the application. Interacting with the stepper while a
  request is in-flight will also cancel it.
    </string>
</resources>